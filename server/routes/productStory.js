// routes/productStory.js
import express from "express";
import OpenAI from "openai";
import dotenv from "dotenv";

dotenv.config();

const router = express.Router();
router.use(express.json());

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

router.post("/", async (req, res) => {
  try {
    const { prompt = "", imageUrls = [] } = req.body || {};
    console.log("üî• [ÏöîÏ≤≠ ÏàòÏã†] prompt:", prompt);
    console.log("üñºÔ∏è imageUrls:", imageUrls);

    const gptPrompt = `
ü™ß Ï†úÌíà ÏÜåÍ∞ú Î¨∏Íµ¨Î•º ÏûëÏÑ±Ìï† Í±∞Ïïº.
Îã§Ïùå Ï†ïÎ≥¥Î•º Î∞îÌÉïÏúºÎ°ú, Í∞êÏÑ±Ï†ÅÏù¥Í≥† ÏßÑÏ†ïÏÑ± ÏûàÍ≤å ÎäêÍª¥ÏßÄÎäî "Ï†úÌíà ÌÉÑÏÉù Ïä§ÌÜ†Î¶¨"Î•º 300~500Ïûê ÎÇ¥Ïô∏Î°ú Ïç®Ï§ò.

---
üìù ÏûÖÎ†•Îêú ÏÑ§Î™Ö:
${prompt}

üñºÔ∏è Ïù¥ÎØ∏ÏßÄ Í∞úÏàò: ${imageUrls.length}
(Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏûàÎã§Î©¥ Ï¥¨ÏòÅ, Ï†úÌíà ÌäπÏßï, ÏßàÍ∞ê Îì±Ïóê ÎåÄÌïú Ï∂îÏ†ïÎèÑ Ìï®Íªò Î∞òÏòÅÌï¥Ï§ò)
---

üìå Ïä§ÌÉÄÏùº ÏòàÏãú:
- Ï¥àÏã¨ÏûêÏùò Î¨∏Ï†úÏùòÏãùÏóêÏÑú Ï∂úÎ∞úÌï¥ ÎßåÎì† Ïù¥ÏïºÍ∏∞
- ÏãúÌñâÏ∞©Ïò§ÎÇò Í≥†Í∞ù ÌîºÎìúÎ∞±ÏúºÎ°ú Í∞úÏÑ†Îêú Î∞∞Í≤Ω
- Ï∞ΩÏûëÏûêÎÇò Î∏åÎûúÎìúÏùò Ï≤†ÌïôÏù¥ ÎäêÍª¥ÏßÄÎäî Î¨∏Ïû•
- ÏÜåÏû¨/Ï†úÏ°∞/ÌòÑÏû•Ïùò Í≥†ÏßëÍ≥º ÎÖ∏Î†•
- 1Ïù∏ Ï∞ΩÏóÖÏûê ÎòêÎäî ÌåÄÏùò Ïó¥Ï†ïÍ≥º Í∏∞Î°ù Îì±

ÏùëÎãµÏùÄ Ïä§ÌÜ†Î¶¨ Î≥∏Î¨∏Îßå Î≥¥ÎÇ¥Ï§ò. "Ï†úÌíà ÌÉÑÏÉù Ïä§ÌÜ†Î¶¨:" Í∞ôÏùÄ ÎßêÏùÄ ÏÉùÎûµÌï¥.
`;

    // üì° GPT-4o API Ìò∏Ï∂ú
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            // Ïù¥ÎØ∏ÏßÄ URLÏùÑ ÏãúÍ∞Å Ï†ïÎ≥¥Î°ú Ï†ÑÎã¨
            ...imageUrls.map((url) => ({
              type: "image_url",
              image_url: {
                url,
                detail: "low",
              },
            })),
            {
              type: "text",
              text: gptPrompt,
            },
          ],
        },
      ],
    });

    const story = response.choices?.[0]?.message?.content?.trim();
    if (!story) throw new Error("No story generated");

    return res.json({ story });
  } catch (e) {
    console.error("‚ùå product-story error:", e.message);
    return res.status(500).json({ error: "story_generation_failed" });
  }
});

export default router;
